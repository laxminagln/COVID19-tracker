{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c74ee224.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\nimport './InfoBox.css';\n\nfunction InfoBox({title, cases, active, total, ...props}) {\n  return(\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && 'infoBox--selected'}`}\n    >\n      <CardContent>\n        <Typography className=\"infoBox_title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n        <h2 className=\"infoBox_cases\">{cases}</h2>\n        <Typography className=\"infoBox_total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\nexport default InfoBox;\n","import React from 'react';\nimport numeral from 'numeral';\nimport { Circle, Popup } from 'react-leaflet';\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  sortedData.sort((a,b) => (a.cases > b.cases ? -1:1));\n  return sortedData;\n}\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType='cases') => (\n  data.map(country =>(\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info_container\">\n          <div\n            style={{backgroundImage: `url(${country.countryInfo.flag})`}}\n            className=\"info_flag\"\n          ></div>\n          <div className=\"info_name\">{country.country}</div>\n          <div className=\"info_confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n          <div className=\"info_recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n          <div className=\"info_deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n        </div>\n      </Popup>\n    </Circle>\n  ))\n);\n","import React from 'react';\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\nimport './Map.css'\nimport { showDataOnMap } from './util';\n\nfunction Map({countries, casesType, center, zoom}) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\nexport default Map;\n","import React from 'react';\nimport './Table.css';\nimport numeral from 'numeral';\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n    {countries.map(({country, cases}) => (\n      <tr>\n        <td>{country}</td>\n        <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n      </tr>\n    ))}\n    </div>\n  )\n}\nexport default Table;\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport './LineGraph.css';\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className=\"linegraph\">\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect } from 'react';\nimport { FormControl, Select, MenuItem, Card, CardContent } from '@material-ui/core';\nimport './App.css';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    })\n  }, [])\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n        const countries = data.map((country) => (\n          {\n            name: country.country,\n            value: country.countryInfo.iso2\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n      });\n    };\n    getCountriesData();\n  }, []);\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    const url =\n    countryCode === 'worldwide'\n    ? 'https://disease.sh/v3/covid-19/all' :\n      `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>COVID 19 TRACKER</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <InfoBox\n            active={casesType === \"cases\"}\n            onClick={e => setCasesType('cases')}\n            title=\"Coronavirus cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={countryInfo.cases}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={e => setCasesType('recovered')}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={countryInfo.recovered}\n          />\n          <InfoBox\n            active={casesType === \"deaths\"}\n            onClick={e => setCasesType('deaths')}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={countryInfo.deaths}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Live cases</h3>\n          <Table countries={tableData}/>\n          <h3>Worldwide new {casesType}</h3>\n          <LineGraph casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}